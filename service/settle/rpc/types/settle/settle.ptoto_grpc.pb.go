// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: settle.ptoto

package settle

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SettleRpcServiceClient is the client API for SettleRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SettleRpcServiceClient interface {
	GetSummaryBySettleType(ctx context.Context, in *SettleTypeSummaryRequest, opts ...grpc.CallOption) (*SettleTypeSummaryListResponse, error)
	GetSum(ctx context.Context, in *SettleCommonRequest, opts ...grpc.CallOption) (*SettleSumResponse, error)
}

type settleRpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSettleRpcServiceClient(cc grpc.ClientConnInterface) SettleRpcServiceClient {
	return &settleRpcServiceClient{cc}
}

func (c *settleRpcServiceClient) GetSummaryBySettleType(ctx context.Context, in *SettleTypeSummaryRequest, opts ...grpc.CallOption) (*SettleTypeSummaryListResponse, error) {
	out := new(SettleTypeSummaryListResponse)
	err := c.cc.Invoke(ctx, "/settle.SettleRpcService/GetSummaryBySettleType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settleRpcServiceClient) GetSum(ctx context.Context, in *SettleCommonRequest, opts ...grpc.CallOption) (*SettleSumResponse, error) {
	out := new(SettleSumResponse)
	err := c.cc.Invoke(ctx, "/settle.SettleRpcService/GetSum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SettleRpcServiceServer is the server API for SettleRpcService service.
// All implementations must embed UnimplementedSettleRpcServiceServer
// for forward compatibility
type SettleRpcServiceServer interface {
	GetSummaryBySettleType(context.Context, *SettleTypeSummaryRequest) (*SettleTypeSummaryListResponse, error)
	GetSum(context.Context, *SettleCommonRequest) (*SettleSumResponse, error)
	mustEmbedUnimplementedSettleRpcServiceServer()
}

// UnimplementedSettleRpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSettleRpcServiceServer struct {
}

func (UnimplementedSettleRpcServiceServer) GetSummaryBySettleType(context.Context, *SettleTypeSummaryRequest) (*SettleTypeSummaryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSummaryBySettleType not implemented")
}
func (UnimplementedSettleRpcServiceServer) GetSum(context.Context, *SettleCommonRequest) (*SettleSumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSum not implemented")
}
func (UnimplementedSettleRpcServiceServer) mustEmbedUnimplementedSettleRpcServiceServer() {}

// UnsafeSettleRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SettleRpcServiceServer will
// result in compilation errors.
type UnsafeSettleRpcServiceServer interface {
	mustEmbedUnimplementedSettleRpcServiceServer()
}

func RegisterSettleRpcServiceServer(s grpc.ServiceRegistrar, srv SettleRpcServiceServer) {
	s.RegisterService(&SettleRpcService_ServiceDesc, srv)
}

func _SettleRpcService_GetSummaryBySettleType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettleTypeSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettleRpcServiceServer).GetSummaryBySettleType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/settle.SettleRpcService/GetSummaryBySettleType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettleRpcServiceServer).GetSummaryBySettleType(ctx, req.(*SettleTypeSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettleRpcService_GetSum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettleCommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettleRpcServiceServer).GetSum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/settle.SettleRpcService/GetSum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettleRpcServiceServer).GetSum(ctx, req.(*SettleCommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SettleRpcService_ServiceDesc is the grpc.ServiceDesc for SettleRpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SettleRpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "settle.SettleRpcService",
	HandlerType: (*SettleRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSummaryBySettleType",
			Handler:    _SettleRpcService_GetSummaryBySettleType_Handler,
		},
		{
			MethodName: "GetSum",
			Handler:    _SettleRpcService_GetSum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "settle.ptoto",
}
